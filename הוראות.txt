# בדיקות אוטומטיות לתרגילי הקורס

בקורס יש עשרות תרגילי תכנות פתוחים. התוכנה הזו מבצעת בדיקות לתרגילים האלו, החל מיחידה 5 (בה מתחילים לעבוד עם פונקציות) ועד ליחידה 9. הבדיקות מוודאות תפקוד תקין של הפתרונות שלכם, בהתאם למספר תרחישי הפעלה. 

## הוראות שימוש

### הקבצים הדרושים

test_self.py
קובץ הבדיקות האוטומטיות לכל התרגילים.

f01.txt, f02.txt, f03.txt, f04.txt, f05.txt, f06.txt, f07.txt
שבעה קבצי טקסט עבור בדיקת תרגילי יחידה 9, בה עוסקים בקריאה וכתיבת קבצים.

### הפעלה

#### הכנה

כל הקבצים המוזכרים צרכים להיות באותה תקייה.
בתקיה הזו יש ליצור קובץ פייתון חדש בשם:
self.py
עבור כל תרגיל שתרצו לבדוק, יש להוסיף אל קובץ זה את הפונקציה שהתבקשתם להגדיר באותו תרגיל (חשוב להקפיד על השם המדויק של הפונקציה כפי שכתוב בהוראות התרגיל).

אם הפונקציה שכתבתם משתמשת בפונקציות אחרות שכתבתם, יש להוסיף גם אותן. אין להעתיק קטעי קוד אחרים כמו פונקציית מיין.
ברובם המוחלט של התרגילים, יש צורך רק בפונקציה אחת.

#### הרצה

כדי להפעיל את הבדיקות פותחים את שורת הפקודה, באותה תקייה בה נמצאים הקבצים, כותבים ומריצים:
python test_self.py

#### פלט הבדיקות

בשורה האחרונה יהיה כתוב עם הבדיקות עברו בהצלחה או שנכשלו:
OK - כל הבדיקות עברו בהצלחה, או שדלגו על חלק מהן.
FAILED - לפחות אחת מהבדיקות נכשלה.
אם לא כל התרגילים נבדקו בהצלחה, בהבמשך שורה זו בתוך סוגריים יכתבו כמויות הבדיקות שנכשלו ו/או דילגו עליהן.

בשורה הראשונה נראה רצף תווים המיצגים את המצב של כל בדיקה:
. (נקודה) - הבדיקה עברה בהצלחה
F (האות אף גדולה) - הבדיקה נכשלה
s (האות אס קטנה) - דילוג על הבדיקה 

אם בדיקה ניכשלה, יודפס מידע לגבי הכשלון, כמו: שם הבדיקה (מספר התרגיל), שם הפונקציה שנבדקה, מה לא קרה כמצופה (ולפעמים מידע נוסף על התרחיש בו הבדיקה נכשלה).

##### דוגמאות

כאשר הוזנו פתרונות ל-9 התרגילים הראשונים והבדיקות לכולם עברו בהצלחה:
.........sssssssssssssssssssssssssssss
----------------------------------------------------------------------
Ran 38 tests in 0.255s

OK (skipped=28)


כאשר הוזנו פתרונות ל-10 התרגילים הראשונים ויש כשלון בבדיקת התרגיל העשירי:
.........Fssssssssssssssssssssssssssss
======================================================================
FAIL: test_ex_6_3_1 (__main__.SelfPyTestCase)
Testing are_lists_equal function
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_self.py", line 232, in test_ex_6_3_1
    self.assertEqual(sp.are_lists_equal(list1, list2), True,
AssertionError: None != True : list1=[0.6, 1, 2, 3], list2=[3, 2, 0.6, 1] should be equal

----------------------------------------------------------------------
Ran 38 tests in 0.029s

FAILED (failures=1, skipped=27)


## הרחבה לבדיקת איכות הקוד

כברירת מחדל נבדקת רק הפונקציונליות של הפתרונות אל מול מספר תרחישי הפעלה. 
יש אפשרות להרחיב את הבדיקות כך שיבחנו גם את איכות הקוד - עמידה בהנחיות סיגנון הכתיבה, שיטות עבודה מומלצות והמנעות מדברים הנחשבים שגויים.

הבדיקות האלו מומלצות רק למי שמסתדר טוב עם אנגלית ולימוד עצמי מתוך מידע באינטרנט - כדי להבין את הודעות השגיאה, יש לחפש את משמעותן באינטרנט.

מדובר על שתי הבדיקות האחרונות, כששמות המתודות שלהן:
test_pycodestyle
test_pylint

לפני שפעילים אותן יש להתקין את המודולים שלהן ע"י הפקודה (בשורת הפקודה בה מריצים את הבדיקות):
pip install pycodestyle pylint

כדי לאפשר את פעולתן כחלק מהבדיקות האוטומטיות, יש לערוך את הקובץ
test_self.py
ולהפוך להערה את השורה (ע"י הוספת סולמית בתחילתה):
@unittest.skip('Disabled. Enable by commenting this line.')
שנמצאת מיד לפני הגדרת כל אחת מהמתודות (ראו שמותיהן שתי פסקאות למעלה).

ניתן גם להפעיל רק אחת מהן 
- הראשונה (pycodestyle) בודקת סגנון כתיבה לפי PEP8.
- השנייה (pylint) בודקת מגוון רחב של מוסכמות תכנות בפייתון.


## אודות

### הצורך

ביחידת הפתיחה של הקורס כתוב: "בכדי לדעת לתכנת בפייתון הדבר החשוב ביותר הוא לתרגל, לתרגל ולתרגל". באמת אחד הדברים החיוביים בקורס הזה, הוא ריבוי התרגילים בהם מתבקשים לכתוב קוד פייתון. דבר קצת פחות חיובי - אין בדיקה ומשוב כלשהו לתרגילים האלו (מלבד במשימה המסכמת של יחידה 10 למשדרגים בתשלום).

יש סיבות אובייקטיביות מדוע בעייתי לאפשר הגשת תרגילי כתיבת קוד לבדיקה בקורס פתוח להמונים, אך העדרן של אפילו בדיקות בסיסית, עלול לפגוע באפקטיביות הקורס. שתי דוגמאות:
* למתכנתים מתחילים קשה לבדוק את עצמם ולהבין אם פתרו את התרגיל - טכנית בכלל לעשות זאת מצד אחד ומהצד השני עלולים לחשוב שהצליחו כשלא כך הדבר. לעתים גם יש בלבול עם הארגומנטים או קבצים המשמשים בתרגיל ונוצר אפקט דומה.
* כשאין שום מנגנון בדיקה, נוטים להקפיד פחות ולפעמים גם לפסוח על תרגילים. לעומת זאת כשיש רשימת בדיקות חיצוניות הנותנת אשרור לפתרון ביחד עם מעקב אחר ההתקדמות, זה נותן חיזוק חיובי ומעודד השלמה של כל התרגילים.

### הפתרון

שפת פייתון מאפשרת, בין השאר, לבצע בדיקות יחידה לפונקציות. אפשר להשתמש בזה כדי להכין בדיקות אוטומטיות לרוב תרגיל הקורס (החל מיחדה 5 בה לומדים פונקציות). ישנם גם לינטרים (כלי בדיקת קוד סטטי לעמידה בהנחיות/מוסכמות השפה. את הבדיקות האלו הלומדים בקורס יכולים להריץ באופן עצמאי על המחשב שלהם.

כתבתי מספר בדיקות כאלו עבור חבר שעשה את הקורס וראיתי שזה מאוד עזר לו. אז כתבתי בדיקות לכל 36 תרגילי יחידות 5 עד 9 בקורס (המשתמשים בפונקציות). שילבתי גם שתי בדיקות אופציונליות לכללי כתיבה בהתאם להנחיות סגנון הכתיבה הרשמיות, לשגיאות קידוד ועוד.

מקווה שהבדיקות האלו יוכלו לתרום לכם.
